---
jobs:
  build_container:
    if: inputs.build_container == 'ghcr.io/mattkobayashi/vyos-build:current'
    name: Build container
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-24.04
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to ghcr.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout repository vyos/vyos-build
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: current
          repository: vyos/vyos-build
      - name: Build container image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: docker
          push: true
          tags: ghcr.io/mattkobayashi/vyos-build:current
  build_iso:
    container:
      image: ${{ inputs.build_container }}
      options: "--privileged --sysctl net.ipv6.conf.lo.disable_ipv6=0"
    if: |
      !cancelled() && 
      contains(fromJSON('["success", "skipped"]'), needs.build_container.result)
    name: Build ISO
    needs: [build_container]
    outputs:
      exit_code: ${{ steps.build_iso.outputs.exit_code }}
      release_filename: ${{ env.RELEASE_FILENAME }}
      version: ${{ env.VERSION }}
      vyos_build_commit: ${{ env.VYOS_BUILD_COMMIT }}
      vyos_build_commit_sha: ${{ env.VYOS_BUILD_COMMIT_SHA }}
      vyos_1x_commit: ${{ env.VYOS_1X_COMMIT }}
      vyos_1x_commit_sha: ${{ env.VYOS_1X_COMMIT_SHA }}
    permissions:
      contents: write
      packages: read
    runs-on: ubuntu-24.04
    steps:
      # - id: remount_workdir
      #   name: Remount the working directory
      #   run: |
      #     set -ex
      #     mount -i -o remount,exec,dev /__w/
      - id: version_string
        name: Generate version string
        run: |
          set -eux
          echo "VERSION=$(date +'%Y.%m.%d')" >> "$GITHUB_ENV"
      - id: patch_string
        if: inputs.patch_string != ''
        name: Add patch string
        run: |
          set -eux
          echo "VERSION=$VERSION-${{ inputs.patch_string }}" >> "$GITHUB_ENV"
      - name: Checkout repository vyos/vyos-build
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: vyos-build
          ref: current
          repository: vyos/vyos-build
      - name: Get latest commit to vyos/vyos-build
        run: |
          set -eux
          echo "VYOS_BUILD_COMMIT=$(git --no-pager log --pretty=format:%h --max-count=1)" >> "$GITHUB_ENV"
        working-directory: vyos-build
      - name: Get latest commit to vyos/vyos-build (full SHA)
        run: |
          set -eux
          echo "VYOS_BUILD_COMMIT_SHA=$(git --no-pager log --pretty=format:%H --max-count=1)" >> "$GITHUB_ENV"
        working-directory: vyos-build
      - name: Checkout repository vyos/vyos-1x
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: packages/vyos-1x
          ref: current
          repository: vyos/vyos-1x
      - name: Get latest commit to vyos/vyos-1x
        run: |
          set -eux
          echo "VYOS_1X_COMMIT=$(git --no-pager log --pretty=format:%h --max-count=1)" >> "$GITHUB_ENV"
        working-directory: packages/vyos-1x
      - name: Get latest commit to vyos/vyos-1x (full SHA)
        run: |
          set -eux
          echo "VYOS_1X_COMMIT_SHA=$(git --no-pager log --pretty=format:%H --max-count=1)" >> "$GITHUB_ENV"
        working-directory: packages/vyos-1x
      - id: patch_os_release
        name: Patch os_release
        run: |
          set -eux
          patch <<'EOF'
          ${{ vars.BUILD_VYOS_IMAGE_PATCH }}
          EOF
        working-directory: vyos-build/scripts/image-build
      - id: patch_support_url
        name: Patch support URL
        run: |
          set -eux
          patch <<'EOF'
          ${{ vars.DEFAULTS_TOML_PATCH }}
          EOF
        working-directory: vyos-build/data
      - id: patch_version_py
        name: Patch version.py
        run: |
          set -eux
          patch <<'EOF'
          ${{ vars.VERSION_PY_PATCH }}
          EOF
        working-directory: packages/vyos-1x/src/op_mode
      - id: add_minisign_pub
        name: Add TBM Minisign public key
        run: |
          set -eux
          echo "${{ secrets.MINISIGN_PUB }}" > vyos-build/data/live-build-config/includes.chroot/usr/share/vyos/keys/tbm.minisign.pub
      - env:
          CA_DIR: data/certificates
          SHIM_CERT_NAME: vyos-dev-2025-shim
          VYOS_KERNEL_CERT_NAME: vyos-dev-2025-linux
        id: secure_boot_certs
        name: "Generate Secure Boot certificates"
        run: |
          set -eux
          # Shim
          echo "${{ secrets.VYOS_DEV_2025_SHIM }}" > ${CA_DIR}/${SHIM_CERT_NAME}.key
          openssl req -new -x509 -key ${CA_DIR}/${SHIM_CERT_NAME}.key -out ${CA_DIR}/${SHIM_CERT_NAME}.der \
            -outform DER -days 36500 -subj "/CN=Tech By Matt Secure Boot CA/" -nodes
          openssl x509 -inform der -in ${CA_DIR}/${SHIM_CERT_NAME}.der -out ${CA_DIR}/${SHIM_CERT_NAME}.pem
          # Kernel
          echo "${{ secrets.VYOS_DEV_2025_LINUX }}" > ${CA_DIR}/${VYOS_KERNEL_CERT_NAME}.key
          openssl req -new -sha256 -key ${CA_DIR}/${VYOS_KERNEL_CERT_NAME}.key -out ${CA_DIR}/${VYOS_KERNEL_CERT_NAME}.csr \
            -outform PEM -days 3650 -subj "/CN=Tech By Matt Secure Boot Signer 2025 - linux/"
          openssl x509 -req -in ${CA_DIR}/${VYOS_KERNEL_CERT_NAME}.csr -CA ${CA_DIR}/${SHIM_CERT_NAME}.pem \
            -CAkey ${CA_DIR}/${SHIM_CERT_NAME}.key -CAcreateserial -out ${CA_DIR}/${VYOS_KERNEL_CERT_NAME}.pem -days 3650 -sha256
          # Cleanup
          rm -f ${CA_DIR}/${SHIM_CERT_NAME}.key
        working-directory: vyos-build
      - id: build_iso
        name: Build TBM VyOS ISO
        run: |
          set -eux
          sudo apt-get --no-install-recommends --quiet=2 install \
            live-build
          sudo make clean
          sudo --preserve-env ./build-vyos-image \
            --architecture amd64 \
            --build-by 'tbm-vyos@tech.bymatt.au' \
            --build-comment 'Please direct all support queries to support@tech.bymatt.au' \
            --build-type release \
            --version ${{ env.VERSION }} \
            --custom-package vyos-1x-smoketest \
            generic
          if [ $? = 0 ]; then
            echo "exit_code=success" >> $GITHUB_OUTPUT
            return 0
          else
            echo "exit_code=fail" >> $GITHUB_OUTPUT
            return 1
          fi
        working-directory: vyos-build
      - id: get_release_filename
        name: Get file name of release ISO
        run: |
          set -eux
          RELEASE_FILENAME=$(ls tbm-vyos-*.iso)
          echo "RELEASE_FILENAME=$RELEASE_FILENAME" >> "$GITHUB_ENV"
        working-directory: vyos-build/build
      - id: upload-artifact
        name: Upload live image artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: tbm-vyos-${{ env.VERSION }}-liveimage
          path: vyos-build/build/live-image-*.hybrid.iso
    timeout-minutes: 45
  smoketests_secure_boot:
    container:
      image: ${{ inputs.build_container }}
      options: "--privileged --sysctl net.ipv6.conf.lo.disable_ipv6=0"
    if: |
      !cancelled() && 
      needs.build_iso.result == 'success'
    name: "Smoketests: Secure Boot"
    needs: [build_iso]
    outputs:
      exit_code: ${{ steps.smoketests_secure_boot.outputs.exit_code }}
    permissions:
      contents: read
      packages: read
    runs-on: ubuntu-24.04
    steps:
      - id: check_kvm
        name: Check KVM support
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get --no-install-recommends --yes install \
            cpu-checker
          sudo kvm-ok
          sudo apt-get --no-install-recommends --yes install \
            cpuid
          if cpuid | grep -q AMD; then
            echo "Nested virtualisation enabled: $(cat /sys/module/kvm_amd/parameters/nested)"
          elif cpuid | grep -q Intel; then
            echo "Nested virtualisation enabled: $(cat /sys/module/kvm_intel/parameters/nested)"
          else
              echo "Unsupported CPU vendor: $(cpuid)" >&2
              exit 1
          fi
      # - id: install_deps
      #   name: Install smoketest dependencies
      #   run: |
      #     set -eux
      #     sudo apt-get --no-install-recommends --yes install \
      #       build-essential \
      #       ovmf \
      #       python3-pexpect \
      #       python3-tomli \
      #       qemu-system-x86 \
      #       qemu-utils
      # - id: enable_kvm
      #   name: Enable KVM support
      #   run: |
      #     set -eux
      #     echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
      #     sudo udevadm control --reload-rules
      #     sudo udevadm trigger --name-match=kvm
      #     sudo usermod -aG kvm runner
      - id: checkout_vyos_build
        name: Checkout repository vyos/vyos-build
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ needs.build_iso.outputs.vyos_build_commit_sha }}
          repository: vyos/vyos-build
      - id: patch_check_qemu_install
        name: Patch the check-qemu-install script
        run: |
          set -eux
          patch <<'EOF'
          ${{ vars.CHECK_QEMU_INSTALL_PATCH }}
          EOF
        working-directory: scripts
      - id: download_iso
        name: Download the ISO artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: tbm-vyos-${{ needs.build_iso.outputs.version }}-liveimage
          path: build
      - id: smoketests_secure_boot
        if: |
          steps.check_kvm.outcome == 'success'
        name: Run smoketests
        run: |
          set -eux
          sudo make testsb
          if [ $? = 0 ]; then
            echo "exit_code=success" >> $GITHUB_OUTPUT
          else
            echo "exit_code=fail" >> $GITHUB_OUTPUT
          fi
name: Development
on:
  workflow_dispatch:
    inputs:
      build_container:
        default: "ghcr.io/mattkobayashi/vyos-build:current"
        description: "Build container to use?"
        options:
          - "vyos/vyos-build:current"
          - "ghcr.io/mattkobayashi/vyos-build:current"
        required: true
        type: choice
      patch_string:
        description: "Patch version? (leave blank for none)"
        required: false
        type: string
